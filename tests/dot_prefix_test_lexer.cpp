#include "general_test.hpp"

int main()
{
	istringstream input("	.	\n.07\n"
						".007\n.1\n"
						".1e-1\n.1e+1\n"
						".1e1\n.123.\n"
						"0 012 0xFF 0Xff\n"
						"0.1.\n0.\n");
	CREATE_LEX_DATA(&input);

	NEXT;
	EXPECTING_TOKEN(DOT_LITERAL);
	EXPECTING_LEXEMA(".");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(FLOAT_LITERAL);
	EXPECTING_LEXEMA(".07");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(FLOAT_LITERAL);
	EXPECTING_LEXEMA(".007");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(FLOAT_LITERAL);
	EXPECTING_LEXEMA(".1");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(FLOAT_LITERAL);
	EXPECTING_LEXEMA(".1e-1");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(FLOAT_LITERAL);
	EXPECTING_LEXEMA(".1e+1");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(FLOAT_LITERAL);
	EXPECTING_LEXEMA(".1e1");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(FLOAT_LITERAL);
	NOT_EXPECTING_LEXEMA(".123.");
	EXPECTING_LEXEMA(".123");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(DOT_LITERAL);
	EXPECTING_LEXEMA(".");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(NUMBER_LITERAL);
	EXPECTING_LEXEMA("0");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(NUMBER_LITERAL);
	EXPECTING_LEXEMA("012")
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(NUMBER_LITERAL);
	EXPECTING_LEXEMA("0xFF");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(NUMBER_LITERAL);
	EXPECTING_LEXEMA("0Xff");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(FLOAT_LITERAL);
	EXPECTING_LEXEMA("0.1");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(DOT_LITERAL);
	EXPECTING_LEXEMA(".");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(NUMBER_LITERAL);
	EXPECTING_LEXEMA("0");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(DOT_LITERAL);
	EXPECTING_LEXEMA(".");
	DESTROY_LEXEMA;

	NEXT;
	EXPECTING_TOKEN(0);

	return 0;
}
